#+TITLE: ZSH Configuration
#+AUTHOR: Yuhri Graziano Bernardes
#+PROPERTY: header-args :tangle ~/.zshrc

* Table of Contents :toc:
- [[#load-antigen][Load antigen]]
  - [[#oh-my-zsh][Oh My ZSH!]]
  - [[#zsh-plugins][ZSH Plugins]]
  - [[#apply-antigen][Apply antigen]]
- [[#environments][Environments]]
  - [[#path][PATH]]
  - [[#terminal][Terminal]]
  - [[#editor][Editor]]
  - [[#zsh-completion-directories][ZSH Completion directories]]
- [[#starship-prompt][Starship prompt]]
- [[#asdf-vm][ASDF VM]]
- [[#google-cloud][Google cloud]]
  - [[#initialize][Initialize]]
- [[#completions][Completions]]
  - [[#local-completions-files][Local completions files]]
  - [[#aws-cli][AWS CLI]]
  - [[#google-cloud-1][Google Cloud]]
  - [[#kubernetes][Kubernetes]]
  - [[#google-cloud-cli][Google Cloud CLI]]
- [[#langs][Langs]]
  - [[#golang][Golang]]
- [[#misc][Misc]]
  - [[#fuzzy-finder-and-navi][Fuzzy Finder and Navi]]
  - [[#neofetch][Neofetch]]
  - [[#direnv][Direnv]]
  - [[#bash-insulter][Bash insulter]]
- [[#aliases][Aliases]]
  - [[#kubectl][Kubectl]]
  - [[#ctop][ctop]]
  - [[#tmux][Tmux]]
  - [[#git-kraken][Git kraken]]
  - [[#reload-zsh][Reload Zsh]]
  - [[#ssh][SSH]]
  - [[#copy-output-to-clipboard][Copy output to clipboard]]
  - [[#navigate-to-parent-directories][Navigate to parent directories]]
  - [[#switch-ls-to-use-exa-cli][Switch `ls` to use `exa` cli]]
  - [[#clear-screen][Clear screen]]
  - [[#file-manager][File Manager]]
  - [[#docker][Docker]]
  - [[#emacs][Emacs]]
  - [[#config-git-bare-repository][Config git bare repository]]
  - [[#git][Git]]
  - [[#github-cli][Github CLI]]
- [[#functions][Functions]]
  - [[#emacs-prepare-go][Emacs prepare go]]
  - [[#create-gitignore-from-gitignoreio][Create Gitignore from gitignore.io]]
  - [[#start-vpn-connection][Start VPN connection]]
  - [[#ssh-agent][SSH Agent]]
  - [[#start-gpg-agent][Start GPG agent]]

* Load antigen
#+begin_src sh
source /home/yuhri/antigen.zsh
#+end_src

** Oh My ZSH!
#+BEGIN_SRC shell
antigen use oh-my-zsh
#+END_SRC

** ZSH Plugins

#+BEGIN_SRC shell
antigen bundle zsh-users/zsh-autosuggestions
antigen bundle zdharma/fast-syntax-highlighting
antigen bundle zsh-users/zsh-completions
#+END_SRC

** Apply antigen
#+begin_src shell
antigen apply
#+end_src

* Environments

** PATH
Resources added to ~PATH~:

- Go binaries

#+BEGIN_SRC shell
export PATH="$PATH:$HOME/go/bin:$HOME/.local/bin:$HOME/.elixir-ls/release"
#+END_SRC

** Terminal

#+BEGIN_SRC shell
export TERM=alacritty
#+END_SRC

** Editor
#+BEGIN_SRC shell
export EDITOR=/usr/bin/emacs
#+END_SRC

** ZSH Completion directories
#+begin_src shell
export ZSH_COMP_DIR=$(echo '$HOME/.zsh/completions' | envsubst)
#+end_src

* Starship prompt
#+begin_src shell
eval $(starship init zsh)
#+end_src

* ASDF VM
#+BEGIN_SRC shell
. $HOME/.asdf/asdf.sh
#+END_SRC
* Google cloud
** Initialize
#+begin_src shell

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/usr/local/etc/google-cloud-sdk/path.zsh.inc' ]; then . '/usr/local/etc/google-cloud-sdk/path.zsh.inc'; fi

#+end_src

* Completions

** Local completions files
*** Docker and Docker-Compose
#+begin_src shell
if [ ! -f $ZSH_COMP_DIR/_docker-compose ]; then
    echo "Fetching docker completions on $ZSH_COMP_DIR"
    mkdir -p $ZSH_COMP_DIR
    curl -L https://raw.githubusercontent.com/docker/compose/1.27.4/contrib/completion/zsh/_docker-compose > $ZSH_COMP_DIR/_docker-compose
fi
#+end_src

*** ASDF VM
#+BEGIN_SRC shell
if [ -d $ASDF_DIR ]; then
    fpath=($ZSH_COMP_DIR/ ${ASDF_DIR}/completions/ $fpath)
fi
#+END_SRC

*** Finish
#+begin_src shell
autoload -Uz compinit && compinit
#+end_src

** AWS CLI

#+BEGIN_SRC shell
if [ $(command -v aws_completer) ]; then
    complete -C aws_completer aws
fi
#+END_SRC

** Google Cloud
#+begin_src shell
# The next line enables shell command completion for gcloud.
if [ -f '/usr/local/etc/google-cloud-sdk/completion.zsh.inc' ]; then . '/usr/local/etc/google-cloud-sdk/completion.zsh.inc'; fi
#+end_src

** Kubernetes
- kubectl cli

#+BEGIN_SRC shell
if [ $(command -v kubectl) ]; then
    source <(kubectl completion zsh) 2> /dev/null
fi
if [ $(command -v minikube) ]; then
    source <(minikube completion zsh) 2> /dev/null
fi
if [ $(command -v helm) ]; then
    source <(helm completion zsh) 2> /dev/null
fi
#+END_SRC

** Google Cloud CLI
#+BEGIN_SRC shell
if [ -f /opt/google-cloud-sdk/completion.zsh.inc ]; then
    source /opt/google-cloud-sdk/completion.zsh.inc
fi
#+END_SRC

* Langs
** Golang

*** Go flat envs to install packages
#+begin_src shell
export GOPATH=~/go
export GOBIN="$GOPATH/bin"
export GO111MODULE=on
export PATH=$GOBIN:$PATH
#+end_src

*** Go Modules environments
#+BEGIN_SRC shell
go_mod() {
    MAIN_PATH=~/go
    
    if [[ ! -f ./.envrc ]]; then
        echo "dotenv" > .envrc
    else
        echo "dotenv" >> .envrc
    fi

    if [[ -f ./.env ]]; then
        echo "" >> .env
    else
        touch .env
    fi

    echo "GOPATH=$MAIN_PATH" >> .env
    echo "GOBIN=$MAIN_PATH/bin" >> .env
    echo "GO111MODULE=on" >> .env

    echo "PATH_add $MAIN_PATH/bin" >> .envrc

    direnv allow
    direnv reload

    if [ ! -f ./go.mod ] && [ ! -z "$1" ]; then
        go mod init $1
    fi
}
#+END_SRC

*** Go dep environments
#+BEGIN_SRC shell
go_dep (){

    MAIN_PATH="$(pwd)"

    if [[ ! -f ./.envrc ]]; then
        echo "dotenv" > .envrc
    else
        echo "dotenv" >> .envrc
    fi


    if [[ -f ./.env ]]; then
        echo "" >> .env
    else
        touch .env
    fi
    
    echo "GOPATH=$MAIN_PATH" >> .env
    echo "GOBIN=$MAIN_PATH/bin" >> .env
    echo "GO111MODULE=off" >> .env

    echo "PATH_add $MAIN_PATH/bin" >> .envrc

    direnv allow
    direnv reload

}
#+END_SRC

* Misc
** Fuzzy Finder and Navi
fzf: [[https://github.com/junegunn/fzf#installation][install]] | [[https://github.com/junegunn/fzf#usage][usage]]
navi: [[https://github.com/denisidoro/navi#installation][install]] | [[https://github.com/denisidoro/navi#usage][usage]]

*** Fzf default commands

#+BEGIN_SRC shell
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

export FZF_DEFAULT_OPS="--extended"
export FZF_DEFAULT_COMMAND="fd --hidden --type f"
export FZF_DEFAULT_CTRL_T_COMMAND=$FZF_DEFAULT_COMMAND
#+END_SRC

** Neofetch

#+BEGIN_SRC shell
if [ $(command -v neofetch) ] ; then
    neofetch
fi
#+END_SRC


** Direnv
Manage environment variables
#+BEGIN_SRC shell
if [ $(command -v direnv) ] ; then
    eval "$(asdf exec direnv hook zsh)"
fi
#+END_SRC

#+RESULTS:

** Bash insulter
load bash insulter

#+BEGIN_SRC shell
if [ -f /etc/bash.command-not-found ]; then
    . /etc/bash.command-not-found
fi
#+END_SRC

* Aliases

** Kubectl
#+begin_src shell
alias k=kubectk
alias kgpa='kubectl get pods --all-namespaces'
#+end_src

** ctop
#+begin_src shell
alias ctop='TERM=xterm-256color ctop'
#+end_src

** Tmux
#+BEGIN_SRC shell
alias t='/usr/bin/tmux -f ~/.tmux.conf'
alias ta='t attach'
alias tas='t attach -t'
alias tl='t ls'
alias tn='t new'
alias tns='t new -t'
alias tks='t kill-session -t'
#+END_SRC

*** Tmuxinator
#+BEGIN_SRC shell
alias tm='/usr/bin/tmuxinator'
alias tms='tm start'
alias tmd='tm delete'
alias tml='tm ls'
alias tme='tm edit'
alias tmn='tm new'
alias tmp='tm implode'
#+END_SRC

** Git kraken
#+BEGIN_SRC shell
alias gitkraken='gitkraken > /dev/null &!'
#+END_SRC

** Reload Zsh
#+BEGIN_SRC shell
reload() {
	local cache="$ZSH_CACHE_DIR"
	autoload -U compinit zrecompile
	compinit -i -d "$cache/zcomp-$HOST"

	for f in ${ZDOTDIR:-~}/.zshrc "$cache/zcomp-$HOST"; do
		zrecompile -p $f && command rm -f $f.zwc.old
	done

	# Use $SHELL if it's available and a zsh shell
	local shell="$ZSH_ARGZERO"
	if [[ "${${SHELL:t}#-}" = zsh ]]; then
		shell="$SHELL"
	fi

	# Remove leading dash if login shell and run accordingly
	if [[ "${shell:0:1}" = "-" ]]; then
		exec -l "${shell#-}"
	else
		exec "$shell"
	fi

    clear
}
#+END_SRC

** SSH

*** New rsa key

#+BEGIN_SRC shell
alias new-ssh='ssh-keygen -t rsa -b 4096 -C'
#+END_SRC

** Copy output to clipboard

#+BEGIN_SRC shell
alias pbcopy='xclip -selection clipboard'
#+END_SRC

** Navigate to parent directories

#+BEGIN_SRC shell
alias ..='cd ..'
alias ...='cd ../..'
#+END_SRC

** Switch `ls` to use `exa` cli

#+BEGIN_SRC shell
alias ls='exa --color=always --group-directories-first' # my preferred listing
alias la='exa -lah --git --color=always --group-directories-first'  # all files and dirs
alias ll='exa -lh --git --color=always --group-directories-first'  # long format
alias lt='exa -aT --color=always --group-directories-first' # tree listing
#+END_SRC

** Clear screen

#+BEGIN_SRC shell
alias cls='clear'
#+END_SRC

** File Manager
Open in file manager

#+BEGIN_SRC shell
alias open="xdg-open"
#+END_SRC

** Docker
*** CLI function
Just for easily cli usage

#+BEGIN_SRC shell
alias d='docker'
alias dc='docker-compose'
#+END_SRC
** Emacs
*** Startup
#+BEGIN_SRC shell
export EMACS_BIN=$(which emacs)
alias emacs='$EMACS_BIN &!'
#+END_SRC

** Config git bare repository

Alias to add configuration files to bare repository

#+BEGIN_SRC shell
alias cfg='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
alias cfga='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME add'
alias cfgs='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME status'
alias cfgc='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME commit -m'
alias cfgp='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME push origin main'
#+END_SRC

** Git
#+BEGIN_SRC shell
alias g='git'
alias gsts='git status'
alias ga='git add'
alias gaa='git add --all'
alias gcl='git clone'
alias gcmm="git commit -m"
alias gcm="git commit"
alias gl='git pull'
#+END_SRC

*** Log
#+BEGIN_SRC shell
alias glg='git log --stat'
alias glgp='git log --stat -p'
alias glgg='git log --graph'
alias glgga='git log --graph --decorate --all'
alias glgm='git log --graph --max-count=10'
alias glo='git log --oneline --decorate'
alias glol="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'"
alias glols="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --stat"
alias glod="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'"
alias glods="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset' --date=short"
alias glola="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --all"
alias glog='git log --oneline --decorate --graph'
alias gloga='git log --oneline --decorate --graph --all'
#+END_SRC

*** Remote
#+BEGIN_SRC shell
alias gr='git remote'
alias gra='git remote add'
alias grup='git remote update'
alias grv='git remote -v'
#+END_SRC

** Github CLI
*** Gists
Fetch gists:
#+BEGIN_SRC shell
alias gist='navi --best-match -q "fetch gist"'
#+END_SRC

* Functions

** Emacs prepare go
#+BEGIN_SRC shell
function emacs_prepare_go {
    echo "Installing gore"
    go get -u github.com/motemen/gore/cmd/gore
    echo "Installing gocode"
    go get -u github.com/stamblerre/gocode
    echo "Installing godoc"
    go get -u golang.org/x/tools/cmd/godoc
    echo "Installing goimports"
    go get -u golang.org/x/tools/cmd/goimports
    echo "Installing gorename"
    go get -u golang.org/x/tools/cmd/gorename
    echo "Installing guru"
    go get -u golang.org/x/tools/cmd/guru
    echo "Installing gotest/..."
    go get -u github.com/cweill/gotests/...
    echo "Installing gomodifytags"
    go get -u github.com/fatih/gomodifytags
    echo "installing gopls"
    go get golang.org/x/tools/gopls
}
#+END_SRC

** Create Gitignore from [[https://gitignore.io/][gitignore.io]]
#+BEGIN_SRC shell
function gi {
    if [ "$1" != "-a" ]; then
        echo "" > ./.gitignore
    fi
    GOPATH=$HOME/go
    for template in $(gogi -list | sed 's/\,/\n/g' | fzf -m);do
        gogi -create $template >> .gitignore
    done
}
#+END_SRC

** Start VPN connection
#+BEGIN_SRC shell
vpn () {
    VPN_LOCATION="$HOME/.accesses/paygo"

    if [ $1 = office ] ;then

        sudo openfortivpn -c $VPN_LOCATION/office.conf

    elif [ $1 = kafka ]; then
        sudo openvpn \
            --config $VPN_LOCATION/kafka/kafka.ovpn \
            --cert $VPN_LOCATION/kafka/kafka.crt \
            --key $VPN_LOCATION/kafka/kafka.key \
            --auth-retry interact
    fi
}
#+END_SRC

** SSH Agent
Start ssh agent configured to use GPG as authentication strategy

#+BEGIN_SRC shell
SSH_ENV="$HOME/.ssh/agent-environment"

function start_agent {
    echo "Initialising new SSH agent..."
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
}

# Source SSH settings, if applicable

if [ -f "${SSH_ENV}" ]; then
    . "${SSH_ENV}" > /dev/null
    #ps ${SSH_AGENT_PID} doesn't work under cywgin
    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
        start_agent;
    }
else
    start_agent;
fi
#+END_SRC

** Start GPG agent
#+BEGIN_SRC shell
function sga {
    pkill gpg-agent
    export GPG_TTY="$(tty)"
    export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
    gpgconf --launch gpg-agent
}

sga
#+END_SRC

