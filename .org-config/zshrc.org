#+TITLE: ZSH Configuration
#+AUTHOR: Yuhri Graziano Bernardes
#+PROPERTY: header-args :tangle ~/.zshrc

* Table of Contents :toc:
- [[#starship-prompt][Starship prompt]]
- [[#oh-my-zsh][Oh My ZSH!]]
- [[#asdf-vm][ASDF VM]]
- [[#zsh-plugins][ZSH Plugins]]
  - [[#embedded-plugin-manager][Embedded Plugin Manager]]
  - [[#zinit-plugin-manaeger][Zinit Plugin Manaeger]]
- [[#compleations][Compleations]]
  - [[#asdf-vm-1][ASDF VM]]
  - [[#github-cli][Github CLI]]
  - [[#aws-cli][AWS CLI]]
  - [[#starship][Starship]]
  - [[#kubernetes][Kubernetes]]
  - [[#google-cloud-cli][Google Cloud CLI]]
- [[#langs][Langs]]
  - [[#golang][Golang]]
- [[#misc][Misc]]
  - [[#fuzzy-finder-and-navi][Fuzzy Finder and Navi]]
  - [[#random-colorscript][Random Colorscript]]
  - [[#direnv][Direnv]]
  - [[#bash-insulter][Bash insulter]]
- [[#environments][Environments]]
  - [[#path][PATH]]
  - [[#terminal][Terminal]]
  - [[#editor][Editor]]
- [[#aliases][Aliases]]
  - [[#tmux][Tmux]]
  - [[#git-kraken][Git kraken]]
  - [[#reload-zsh][Reload Zsh]]
  - [[#ssh][SSH]]
  - [[#react][React]]
  - [[#copy-output-to-clipboard][Copy output to clipboard]]
  - [[#navigate-to-parent-directories][Navigate to parent directories]]
  - [[#switch-ls-to-use-exa-cli][Switch `ls` to use `exa` cli]]
  - [[#clear-screen][Clear screen]]
  - [[#file-manager][File Manager]]
  - [[#docker][Docker]]
  - [[#emacs][Emacs]]
  - [[#config-git-bare-repository][Config git bare repository]]
  - [[#git][Git]]
  - [[#github-cli-1][Github CLI]]
- [[#functions][Functions]]
  - [[#emacs-prepare-go][Emacs prepare go]]
  - [[#create-gitignore-from-gitignoreio][Create Gitignore from gitignore.io]]
  - [[#start-vpn-connection][Start VPN connection]]
  - [[#ssh-agent][SSH Agent]]
  - [[#start-gpg-agent][Start GPG agent]]

* Starship prompt
#+begin_src shell
eval $(starship init zsh)
#+end_src

* COMMENT P10k Theme
[[https://github.com/romkatv/powerlevel10k][repo]]

Powerlevel10k is a theme with powerfull feature to better shell visualization

** Load p10k source

#+BEGIN_SRC shell
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

ZSH_THEME="powerlevel10k/powerlevel10k"
#+END_SRC

** Load p10k config
[[https://github.com/romkatv/powerlevel10k#batteries-included][reference]] | [[https://github.com/romkatv/powerlevel10k#extensible][Create your own config]]

#+BEGIN_SRC shell
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
#+END_SRC

* Oh My ZSH!
#+BEGIN_SRC shell
export ZSH="$HOME/.oh-my-zsh"
source $ZSH/oh-my-zsh.sh
#+END_SRC

* ASDF VM
#+BEGIN_SRC shell
. $HOME/.asdf/asdf.sh
#+END_SRC
* ZSH Plugins
** Embedded Plugin Manager

#+BEGIN_SRC shell
plugins=(
    git               # git aliases and utilities
    docker
    docker-compose
)
#+END_SRC

** Zinit Plugin Manaeger

[[https://github.com/zdharma/zinit#installation][Installation]] | [[https://github.com/zdharma/zinit#usage][Usage]]

*** Startup
These scripts was added automatcally by the installer. (see Installation link above)

#+BEGIN_SRC shell

if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

zinit light-mode for \
    zinit-zsh/z-a-as-monitor \
    zinit-zsh/z-a-patch-dl \
    zinit-zsh/z-a-bin-gem-node
#+END_SRC

*** Syntax highlit
#+BEGIN_SRC shell
zplugin light zdharma/fast-syntax-highlighting
#+END_SRC

*** Autocompleation
#+BEGIN_SRC shell
zplugin light zsh-users/zsh-completions
zplugin light zsh-users/zsh-autosuggestions
#+END_SRC

* Compleations
** ASDF VM

#+BEGIN_SRC shell
fpath=($HOME/.zsh/completions/ ${ASDF_DIR}/completions/ $fpath)
autoload -Uz compinit && compinit
#+END_SRC
** Github CLI

#+BEGIN_SRC shell
eval $(gh completion -s zsh 2> /dev/null)
#+END_SRC

** AWS CLI

#+BEGIN_SRC shell
complete -C $(which aws_completer) aws 2> /dev/null
#+END_SRC

** Starship

#+begin_src shell
eval $(starship completions zsh 2> /dev/null)
#+end_src

** Kubernetes
- kubectl cli

#+BEGIN_SRC shell
source <(kubectl completion zsh) 2> /dev/null
#+END_SRC

** Google Cloud CLI
#+BEGIN_SRC shell
source /opt/google-cloud-sdk/completion.zsh.inc
#+END_SRC

* Langs
** Golang

*** Go Modules environments
#+BEGIN_SRC shell
go_mod() {
    MAIN_PATH=~/go
    echo "dotenv" >> .envrc

    echo "" > .env
    echo "GOPATH=$MAIN_PATH" >> .env
    echo "GOBIN=$MAIN_PATH/bin" >> .env
    echo "GO111MODULE=on" >> .env

    echo "PATH_add $MAIN_PATH/bin" >> .envrc

    direnv allow
    direnv reload
}
#+END_SRC

*** Go dep environments
#+BEGIN_SRC shell
go_dep (){

    MAIN_PATH="$(pwd)"

    echo "dotenv" >> .envrc


    echo "" > .env
    echo "GOPATH=$MAIN_PATH" >> .env
    echo "GOBIN=$MAIN_PATH/bin" >> .env
    echo "GO111MODULE=off" >> .env

    echo "PATH_add $MAIN_PATH/bin" >> .envrc

    direnv allow
    direnv reload

}
#+END_SRC

* Misc
** Fuzzy Finder and Navi
fzf: [[https://github.com/junegunn/fzf#installation][install]] | [[https://github.com/junegunn/fzf#usage][usage]]
navi: [[https://github.com/denisidoro/navi#installation][install]] | [[https://github.com/denisidoro/navi#usage][usage]]

*** Load sources
#+BEGIN_SRC shell
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
source <(navi widget zsh)
#+END_SRC

*** Fzf default commands

#+BEGIN_SRC shell
export FZF_DEFAULT_OPS="--extended"
export FZF_DEFAULT_COMMAND="fd --hidden --type f"
export FZF_DEFAULT_CTRL_T_COMMAND=$FZF_DEFAULT_COMMAND
#+END_SRC

*** Custom `cd` command for fzf
- Use `fd` command to get directories
- Configure space key for toggle preview
- Configure preview for show dir content

#+BEGIN_SRC shell
cd_fzf (){
    cd $HOME && cd $(fd --hidden -t d | fzf --preview="tree -L 1 {}" --bind="space:toggle-preview" --preview-window=:hidden)
    clear
}

bindkey -s "^[c" "cd_fzf^M"
#+END_SRC

** Random Colorscript
Run colorcript on shell startup

#+BEGIN_SRC shell
if [ -f /opt/shell-color-scripts/colorscript.sh ] ; then
/opt/shell-color-scripts/colorscript.sh -e $(echo "32\n41\n42" | shuf -n1)
fi
#+END_SRC


** Direnv
Manage environment variables
#+BEGIN_SRC shell
if [ $(command -v direnv) ] ; then
    eval "$(direnv hook zsh)"
fi
#+END_SRC

** Bash insulter
load bash insulter

#+BEGIN_SRC shell
if [ -f /etc/bash.command-not-found ]; then
    . /etc/bash.command-not-found
fi
#+END_SRC

* Environments

** PATH
Resources added to ~PATH~:

- Go binaries

#+BEGIN_SRC shell
export PATH="$PATH:$HOME/go/bin"
#+END_SRC

** Terminal

#+BEGIN_SRC shell
export TERM=alacritty
#+END_SRC

** Editor
#+BEGIN_SRC shell
export EDITOR=/usr/bin/emacs
#+END_SRC

* Aliases

** Tmux
#+BEGIN_SRC shell
alias t='/usr/bin/tmux -f ~/.tmux.conf'
alias tm='/usr/bin/tmuxinator'
#+END_SRC

** Git kraken
#+BEGIN_SRC shell
alias gitkraken='gitkraken > /dev/null & disown %gitkraken'
#+END_SRC

** Reload Zsh
#+BEGIN_SRC shell
reload() {
	local cache="$ZSH_CACHE_DIR"
	autoload -U compinit zrecompile
	compinit -i -d "$cache/zcomp-$HOST"

	for f in ${ZDOTDIR:-~}/.zshrc "$cache/zcomp-$HOST"; do
		zrecompile -p $f && command rm -f $f.zwc.old
	done

	# Use $SHELL if it's available and a zsh shell
	local shell="$ZSH_ARGZERO"
	if [[ "${${SHELL:t}#-}" = zsh ]]; then
		shell="$SHELL"
	fi

	# Remove leading dash if login shell and run accordingly
	if [[ "${shell:0:1}" = "-" ]]; then
		exec -l "${shell#-}"
	else
		exec "$shell"
	fi

    clear
}
#+END_SRC

** SSH

*** New rsa key

#+BEGIN_SRC shell
alias new-ssh='ssh-keygen -t rsa -b 4096 -C'
#+END_SRC

** React
#+BEGIN_SRC shell
alias cra='create-react-app'
#+END_SRC
** Copy output to clipboard

#+BEGIN_SRC shell
alias pbcopy='xclip -selection clipboard'
#+END_SRC

** Navigate to parent directories

#+BEGIN_SRC shell
alias ..='cd ..'
alias ...='cd ../..'
#+END_SRC

** Switch `ls` to use `exa` cli

#+BEGIN_SRC shell
alias ls='exa --color=always --group-directories-first' # my preferred listing
alias la='exa -lah --git --color=always --group-directories-first'  # all files and dirs
alias ll='exa -lh --git --color=always --group-directories-first'  # long format
alias lt='exa -aT --color=always --group-directories-first' # tree listing
#+END_SRC

** Clear screen

#+BEGIN_SRC shell
alias cls='clear'
#+END_SRC

** File Manager
Open in file manager

#+BEGIN_SRC shell
alias open="xdg-open"
#+END_SRC

** Docker
*** CLI function
Just for easily cli usage

#+BEGIN_SRC shell
alias d='docker'
alias dc='docker-compose'
#+END_SRC
** Emacs
*** Startup
#+BEGIN_SRC shell
alias emacs='LANG=pt_BR.utf8 && /usr/bin/emacs & disown %/usr/bin/emacs'
#+END_SRC

** Config git bare repository

Alias to add configuration files to bare repository

#+BEGIN_SRC shell
alias cfg='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
alias cfga='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME add'
alias cfgs='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME status'
alias cfgc='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME commit -m'
alias cfgp='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME push origin main'
#+END_SRC

** Git
#+BEGIN_SRC shell
alias g='git'
alias gsts='git status'
alias ga='git add'
alias gaa='git add --all'
alias gcl='git clone'
alias gcmm="git commit -m"
alias gcm="git commit"
alias gl='git pull'
#+END_SRC

*** Log
#+BEGIN_SRC shell
alias glg='git log --stat'
alias glgp='git log --stat -p'
alias glgg='git log --graph'
alias glgga='git log --graph --decorate --all'
alias glgm='git log --graph --max-count=10'
alias glo='git log --oneline --decorate'
alias glol="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'"
alias glols="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --stat"
alias glod="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'"
alias glods="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset' --date=short"
alias glola="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --all"
alias glog='git log --oneline --decorate --graph'
alias gloga='git log --oneline --decorate --graph --all'
#+END_SRC

*** Remote
#+BEGIN_SRC shell
alias gr='git remote'
alias gra='git remote add'
alias grup='git remote update'
alias grv='git remote -v'
#+END_SRC

** Github CLI
*** Gists
Fetch gists:
#+BEGIN_SRC shell
alias gist='navi --best-match -q "fetch gist"'
#+END_SRC

* Functions

** Emacs prepare go
#+BEGIN_SRC shell
function emacs_prepare_go {
    echo "Installing gore"
    go get -u github.com/motemen/gore/cmd/gore
    echo "Installing gocode"
    go get -u github.com/stamblerre/gocode
    echo "Installing godoc"
    go get -u golang.org/x/tools/cmd/godoc
    echo "Installing goimports"
    go get -u golang.org/x/tools/cmd/goimports
    echo "Installing gorename"
    go get -u golang.org/x/tools/cmd/gorename
    echo "Installing guru"
    go get -u golang.org/x/tools/cmd/guru
    echo "Installing gotest/..."
    go get -u github.com/cweill/gotests/...
    echo "Installing gomodifytags"
    go get -u github.com/fatih/gomodifytags
    echo "installing gopls"
    go get golang.org/x/tools/gopls
}
#+END_SRC

** Create Gitignore from [[https://gitignore.io/][gitignore.io]]
#+BEGIN_SRC shell
function gi {
    if [ "$1" != "-a" ]; then
        echo "" > ./.gitignore
    fi
    GOPATH=$HOME/go
    for template in $(gogi -list | sed 's/\,/\n/g' | fzf -m);do
        gogi -create $template >> .gitignore
    done
}
#+END_SRC

** Start VPN connection
#+BEGIN_SRC shell
vpn () {
    VPN_LOCATION="$HOME/.accesses/paygo"

    if [ $1 = office ] ;then

        sudo openfortivpn -c $VPN_LOCATION/office.conf

    elif [ $1 = kafka ]; then
        sudo openvpn \
            --config $VPN_LOCATION/kafka/kafka.ovpn \
            --cert $VPN_LOCATION/kafka/kafka.crt \
            --key $VPN_LOCATION/kafka/kafka.key \
            --auth-retry interact
    fi
}
#+END_SRC

** SSH Agent
Start ssh agent configured to use GPG as authentication strategy

#+BEGIN_SRC shell
SSH_ENV="$HOME/.ssh/agent-environment"

function start_agent {
    echo "Initialising new SSH agent..."
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
}

# Source SSH settings, if applicable

if [ -f "${SSH_ENV}" ]; then
    . "${SSH_ENV}" > /dev/null
    #ps ${SSH_AGENT_PID} doesn't work under cywgin
    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
        start_agent;
    }
else
    start_agent;
fi
#+END_SRC

** Start GPG agent
#+BEGIN_SRC shell
function sga {
    pkill gpg-agent
    export GPG_TTY="$(tty)"
    export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
    gpgconf --launch gpg-agent
}

sga
#+END_SRC
